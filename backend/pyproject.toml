[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-trading-manager"
version = "1.0.0"
description = "Enterprise-grade cryptocurrency trading manager"
authors = [{name = "Sjef Sharp", email = "sjef@example.com"}]
readme = "README.md"
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "fastapi==0.116.1",
    "uvicorn[standard]==0.24.0",
    "python-multipart==0.0.18",
    "authlib==1.3.2",
    "passlib[bcrypt]==1.7.4",
    "sqlalchemy==2.0.23",
    "alembic==1.12.1",
    "httpx==0.25.2",
    "aiohttp==3.12.14",
    "pandas==2.3.1",
    "numpy==1.26.4",
    "pandas-ta==0.3.14b0",
    "python-dotenv==1.0.0",
    "pydantic==2.9.2",
    "pydantic-settings==2.10.1",
    "cryptography==45.0.5",
    # Security updates
    "urllib3>=2.5.0",
    "jinja2>=3.1.6",
    "requests>=2.32.4",
    "h11>=0.16.0",
]

[project.optional-dependencies]
dev = [
    "black==25.1.0",
    "isort==6.0.1",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pylint==3.3.8",
    "bandit==1.8.6",
    "pydocstyle==6.3.0",
]
test = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "factory-boy==3.3.0",
]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.6.16",
]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "sqlalchemy", "pydantic"]

[tool.flake8]
max-line-length = 88
# NO IGNORES - all code style violations must be fixed
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "dist",
    "build"
]

[tool.mypy]
python_version = "3.13"
# MAXIMUM STRICT - no compromises, no overrides
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
# NO OVERRIDES - all code must be properly typed

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
# NO COVERAGE EXCLUDES - all code must be tested

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
# Bandit security configuration - MAXIMUM security for production
exclude_dirs = ["tests", "venv", ".venv", "__pycache__", "migrations", "alembic"]
# Set confidence and severity to low to catch ALL potential security issues
confidence = "low"
severity = "low"
# NO SKIPS - maximum security for production
# Additional security checks
assert_used = true
# Recursive scanning for maximum coverage
recursive = true

[tool.pylint.messages_control]
# NO DISABLES - all code quality issues must be addressed
# NO COMPROMISES for enterprise-grade code

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
# Standard strict limits - no special exceptions
max-attributes = 7
max-arguments = 5
max-branches = 12
max-statements = 50
